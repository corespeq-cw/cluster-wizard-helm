apiVersion: batch/v1
kind: Job
metadata:
  name: create-secret-job
  namespace: {{ .Release.Namespace | quote }}
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
  labels:
    {{- include "cluster-wizard.labels" . | nindent 4 }}
spec:
  backoffLimit: 3
  template:
    spec:
      containers:
        - name: secret-creator
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["/bin/bash", "-c"]
          args:
            - |
              set -e

              apt update && apt install -y curl
              SECRET_NAME="admin-cred"
              NAMESPACE=$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)
              TOKEN=$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)
              APISERVER="https://kubernetes.default.svc"

              STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
                --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
                -H "Authorization: Bearer $TOKEN" \
                "$APISERVER/api/v1/namespaces/$NAMESPACE/secrets/$SECRET_NAME")
              if [ "$STATUS" -eq 200 ]; then
                echo ""
                echo "Secret '$SECRET_NAME' already exists in namespace '$NAMESPACE'. Skipping creation."
              else
                apt install -y openssl

                openssl genrsa -out private.key 2048
                openssl rsa -in private.key -pubout -out public.key
                openssl req -new -key private.key -out user.csr \
                  -subj "/CN={{ .Values.adminUser }}/emailAddress={{ .Values.adminEmail }}"

                ./cluster-wizard -sign-csr user.csr

                PRIVATE_B64=$(base64 -w 0 private.key)
                PUBLIC_B64=$(base64 -w 0 public.key)
                CERT_B64=$(base64 -w 0 {{ .Values.adminUser }}_cert.pem)
                cat > secret.json <<EOF
              {
                "apiVersion": "v1",
                "kind": "Secret",
                "metadata": {
                  "name": "$SECRET_NAME"
                },
                "type": "Opaque",
                "data": {
                 "private_key": "$PRIVATE_B64",
                 "public_key": "$PUBLIC_B64",
                 "cert": "$CERT_B64"
                }
              }
              EOF
                STATUS=$(curl -s -X POST -w "%{http_code}" -o /tmp/body.out --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt \
                  -H "Authorization: Bearer $TOKEN" \
                  -H "Content-Type: application/json" \
                  -d @secret.json "$APISERVER/api/v1/namespaces/$NAMESPACE/secrets")
                  if [ "${STATUS: -3}" -ne 200 ] && [ "${STATUS: -3}" -ne 201 ] && [ "${STATUS: -3}" -ne 202 ]; then
                    echo ""
                    echo "FAILURE"
                    cat /tmp/body.out
                    exit 1
                  fi
                  echo ""
                  echo "SUCCESS"
               fi
          volumeMounts:
            - name: secret-volume
              readOnly: true
              mountPath: "/cluster_wizard"
      volumes:
        - name: secret-volume
          projected:
            sources:
              - secret:
                  name: {{ include "cluster-wizard.secret" . }}
              - secret:
                  name: {{ .Values.clusterWizardCert.clientCASecretName }}
                  items:
                    - key: tls.crt
                      path: client_ca_cert.pem
                    - key: tls.key
                      path: client_ca_key.pem
              - secret:
                  name: {{ .Values.clusterWizardCert.serverSecretName }}
                  items:
                    - key: tls.crt
                      path: server_cert.pem
                    - key: tls.key
                      path: server_key.pem
              - secret:
                  name: {{ .Values.licenseSecretName }}
                  items:
                    - key: license
                      path: cluster-wizard.lic
      restartPolicy: Never
